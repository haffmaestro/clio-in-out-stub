== README

Because the original cloudfront asset was not loading I made a new mockup of a logo.

Ruby Version 2.1.5

## Installation:

1. $ git clone 
3. $ brew install redis
2. $ bundle install
4. $ rake db:create db:migrate 
5. $ rake db:seed - optional
6  $ rake teams:create - optional
7. $ redis-server /usr/local/etc/redis.conf - optional
8. $ rails s

If redis server is giving error message about not connecting please complete step 6 as well

## Explanation of solution:
- Realtime statuses
	I migrated the project to a new Rails 4.1.6 installation so I'd be able to use ActionController::Live.
	This works really well, and using a redis backend to have the pub/sub system going the statuses update 
	seemingly instantaneous.
	The JS code for this is in statusStream.js.coffee file. -Update 29/12/14, this functionality is now done with Angular.
- Teams
	Teams is a simple rails CRUD, but the adding of teammembers to a team is done using Angular.
	The teammembers on the team/show page is also shown using Angular.
	When you use the dropdown menu on the show page it shows all users who are currently not in the 
	teams show page you are on.
	The code for this is in the teamSelect.js.coffee file
- Testing
	There is currently 92.4% test coverage, because the angular code is so simple I'm not testing it
	but it would be the next thing to test.
- IPs
	To make sure I didnt loose any of the current data in these columns I first made a new IPs model, 
	which I could use to copy my data as well as test my code for conversion of the ips from Strings to integers.
	To convert them and store them as Integers I used the following formula:
	For the ip address 127.0.0.1
	(127*256^3 + 0*256^2 + 0.256^1 + 1) = 2130706433
	This code can be seen in both the ips.rake task that I used to convert them and in the User model,
	where I overrode the standard ActiveRecord setters so that they would save the data correctly and not
	lose information.
	I also had to alter the original migration (20130416230652_convert_string_ips_to_integers.rb) and give
	it a USING expression so it knew how to convert my string ips to integers.
	Before I ran this migration I ran the ips:convert_user_ips so that the ips would not be truncated.

## Questions to be answered
* Notice that the IP addresses are stored as integers in the DB. 
	What are the pros and cons of this approach, compared to storing the IP addresses as strings?

- Since most times when you want to use a an ip address we would use it in the string format, 127.0.0.1 can 	actually be accessed while 2130706433 would have to converted first so human readability is at 0.
- The type integer has an upper limit on how big it can be and when doing the conversion you can easily make 	to large numbers, so it would actually be better to store the IPs as BigNum rather than FixNum.
- The storage of Integer takes less space and is more easily searchable.

---------------------------------------------------------------------------

* Are there any security issues present within app?
No need to mention security vulnerabilities within external gems.  
List any security issues you found, and how to fix them. 
Also list any potential security issues that you investigated that you believe the site to be free of. 

- Because I migrated the app from 3.1.13 to rails 4.1.6 there are bound to be many vulnerabilities which have been patched so this is sure to have increased the security of the app. If there are any other vulnerabilities in this app, which I'm sure there are, I have not been able to find them, but I have done most I can do in order to make sure I'm using the latest versions of each software.

## Other things that could be done
1. Do the statusStream code in Angular. -Completed 29/12/14
2. Preload users on index -Completed 30/12/14
3. Make sure adding a new user also gets displayed in real time. To do this I would have to overwrite the Devise registrations controller, so maybe this functionality isnt that desirable.